<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{ nameSpaceOfClass }}\{{ capsName }}CreateRequest;
use App\Http\Requests\{{ nameSpaceOfClass }}\{{ capsName }}UpdateRequest;
use App\Services\{{ nameSpaceOfClass }}\{{ capsName }}Service;
use App\Http\Resources\{{ nameSpaceOfClass }}\{{ capsName }}CreateResource;
use App\Http\Resources\{{ nameSpaceOfClass }}\{{ capsName }}ListingResource;
use App\Http\Resources\{{ nameSpaceOfClass }}\{{ capsName }}ShowResource;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

class {{ capsName }}Controller extends Controller
{
    public function __construct(
    protected {{ capsName }}Service ${{ name }}Service,
    protected Request $request) {}

    public function index()
    {
        try {
            $data = $this->{{ name }}Service->retrieve{{ pluralName }}($this->request);

            return {{ capsName }}ListingResource::collection($data);
        } catch (\Exception $e) {
            return $this->handleException($e);
        }
    }

    public function store({{ capsName }}CreateRequest $request)
    {
        try {
            $data = $this->{{ name }}Service->create{{ capsName }}($request);

            return new {{ capsName }}CreateResource($data);
        } catch (\Exception $e) {
            return $this->handleException($e);
        }
    }

    public function show(string $id)
    {
        try {
            $data = $this->{{ name }}Service->get{{ capsName }}ById($id);
            return new {{ capsName }}ShowResource($data);
        } catch (\Exception $e) {
            return $this->handleException($e);
        }
    }

    public function update({{ capsName }}UpdateRequest $request,string $id)
    {
        try {
            $data = $this->{{ name }}Service->update{{ capsName }}($id, $request);
            return new {{ capsName }}ShowResource($data);
        } catch (\Exception $e) {
            return $this->handleException($e);
        }
    }

    public function destroy(string $id)
    {
        try {
            $success = $this->{{ name }}Service->delete{{ capsName }}($id);
            if ($success) {
                return response()->json([
                    'success' => true,
                    'message' => '{{ capsName }} deleted successfully.',
                ], 200);
            }
        } catch (\Exception $e) {
            return $this->handleException($e);
        }
    }
}
